class Solution {
public:
    vector<int> seen;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        seen = *(new vector<int>(graph.size()));
        map<int,int> in;
        for (auto i : initial) {
            in[i]=1;
        }
        int ans = 10000;
        int prev = 0;
        bool one = false;
        for (int i = 0; i < graph.size(); i++) {
            if (!seen[i]) {
                vector<int> temp = bfs(graph, in, seen, i);
                //cout<<i<<", "<<temp[2]<<" a\n";
                //cout<<temp[1]<<", "<<prev<<"\n";
                if (temp[1]==1 && temp[2]>=prev) {
                    one=true;
                    if (temp[2]>prev) {
                        ans = temp[0];
                        prev=temp[2];
                    } else {
                        ans = min(ans,temp[0]);
                    }
                    //cout<<ans<<"\n";
                } else if (temp[1] && !one) {
                    cout<<temp[0]<<"t\n";
                    ans=min(ans,temp[0]);
                    /* if (temp[0]<ans) {
                        ans=temp[0];
                    } */
                }
            }
        }
        return ans;
    }
    vector<int> bfs(vector<vector<int>>& graph, map<int,int> in, vector<int>& seen, int start) {
        int m = 10000;
        queue<int> q;
        q.push(start);
        int count=0;
        int size=0;
        while (q.size()>0) {
            int curr = q.front();
            q.pop();
            if (!seen[curr]) {
                //cout<<curr<<"curr\n";
                size++;
                if (in[curr]) {
                    m=min(m,curr);
                    count++;
                }
                seen[curr]=1;
                int index=0;
                for (auto i : graph[curr]) {
                    //cout<<i<<"i\n";
                    if (i && !seen[index]) {
                        q.push(index);
                    }
                    index++;
                }
            }
        }
        return vector<int> {m, count, size};
    }
};